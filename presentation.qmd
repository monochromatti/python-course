---
title: "Python-kurs"
format:
    revealjs:
        theme: default
        width: 1200
        height: 800
        mermaid:
          theme: neutral
        highlight-style: ayu-light
code-annotations: hover
---

# Introduksjon

## Hvorfor Python?
- Enkel syntaks
- Allsidig
  - Automatisering med scripts
  - Dataanalyse med notebooks
  - Programvare med pakker
- Limspråk
  - Gir tilgang til toppmoderne programvare


## Python: Et knutepunkt

```{mermaid}
flowchart LR
 Python <--> Database
 Python <--> Nettverkstjeneste
 Python <--> Filsystem

 subgraph Python["Python applikasjon"]
   N["Numerisk bibliotek"]
 end
```

## Eksempel: automatisering

```{python}
import polars as pl
from great_tables import GT, style, loc

table = GT(pl.read_excel("data/sales.xlsx")).tab_options(
    table_body_vlines_style="solid",
    table_width="100%",
    table_font_size="16pt",
    column_labels_font_weight="bold",
)
table.show()
```

##

Hva er det bestselgende produkt per selger?

```{.python code-line-numbers="1|3|4-8|9"}
import polars as pl

sales_data = pl.read_excel("sales.xlsx")
ranked_products = (
    sales_data.group_by("salesperson", "product")
    .agg(pl.col("amount").sum())
    .filter(pl.col("amount") == pl.col("amount").max().over("salesperson"))
)
ranked_products
```

```{python}
from great_tables import GT

sales_data = pl.read_excel("data/sales.xlsx")
ranked_products = (
    sales_data.group_by("salesperson", "product")
    .agg(pl.col("amount").sum())
    .filter(pl.col("amount") == pl.col("amount").max().over("salesperson"))
)
GT(ranked_products).tab_options(
    table_width="80%",
    table_font_size="16pt",
    column_labels_font_weight="bold",
).show()
```

## Eksempel: dataanalyse

Når hoppet oljetemperaturen mer enn ett standardavvik over én dag?


```{.python code-line-numbers="1-2|4|5-7|9|10|12"}
import polars as pl
import altair as alt

temperatur = pl.read_csv("data/oljetemperatur.csv")
avvik = temperatur.filter(
    pl.col("daily_avg").diff() > pl.col("daily_avg").std()
)

data_chart = alt.Chart(temperatur).mark_line().encode(x="date:T",y="daily_avg")
jump_chart = alt.Chart(avvik).mark_circle(color="red", size=100).encode(x="date:T", y="daily_avg")

(data_chart + jump_chart).properties(width=1000, height=200).interactive()
```

```{python}
import polars as pl
import altair as alt

temperatur = pl.read_csv("data/oljetemperatur.csv")
avvik = temperatur.filter(
    pl.col("daily_avg").diff() > pl.col("daily_avg").std()
)

data_chart = alt.Chart(temperatur).mark_line().encode(x="date:T",y="daily_avg")
jump_chart = alt.Chart(avvik).mark_circle(color="red", size=100).encode(x="date:T", y="daily_avg")

(data_chart + jump_chart).properties(width=1000, height=200).interactive()
```

# Variables
Navngitt "knagg" å henge verdier (Python-objekter) på.

```{.python code-line-numbers="1|2|3|4|6-11"}
navn = "mattias"
alder = 30
har_bil = False
hobbyer = ["historie", "filosofi", "programmering", "piano"]

mattias = {
  "navn": "mattias",
  "alder": 30,
  "har_bil": False,
  "hobbyer": ["historie", "filosofi", "programmering", "piano"]
}
```

. . .

**Annotations**

```{.python code-line-numbers="1|2|3|4|6"}
navn: str = "mattias"
alder: int = 30
har_bil: bool = False
hobbyer: list = ["historie", "filosofi", "programmering", "piano"]

mattias: dict = {"navn": "mattias", "alder": 30, "har_bil": False, "hobbyer": ["historie", "filosofi", "programmering", "piano"]}
```


## Variables: Collections
Variabler kan *samles* i en `list`{.python} eller en `dict`{.python}. Hvordan får man verdiene ut?

```{python}
#| echo: True
hobbyer = ["historie", "filosofi", "programmering", "piano"]
mattias = {
  "alder": 30,
  "har_bil": False,
  "hobbyer": hobbyer # <1>
}
```

1. `list` og `dict` kan ha verdier som refererer til andre variabler

. . .

<br>
`list`{.python} aksesseres med tall (fra 0)
```{python}
#| echo: True
hobbyer[2]
```

. . .

<br>
`dict`{.python} aksesseres med nøkkelverdien
```{python}
#| echo: True
mattias["alder"]
```


# Operators
Symboler for å kombinere variabler. For eksempel,

::: {style="font-size: 18pt;"}
| Operator | Description               | Example                    |
| -------- | ------------------------- | -------------------------- |
| `+`      | Addition                  | `5 + 3` → `8`              |
| `-`      | Subtraction               | `5 - 3` → `2`              |
| `*`      | Multiplication            | `5 * 3` → `15`             |
| `/`      | Division                  | `5 / 3` → `1.6667`         |
| `**`     | Exponentiation            | `5 ** 3` → `125`           |
| `==`     | Equal to                  | `5 == 3` → `False`         |
| `!=`     | Not equal to              | `5 != 3` → `True`          |
| `<`      | Less than                 | `5 < 3` → `False`          |
| `>`      | Greater than              | `5 > 3` → `True`           |
| `<=`     | Less than or equal        | `5 <= 3` → `False`         |
| `>=`     | Greater than or equal     | `5 >= 3` → `True`          |
| `and`    | Logical AND               | `True and False` → `False` |
| `or`     | Logical OR                | `True or False` → `True`   |
| `not`    | Logical NOT               | `not True` → `False`       |
| `in`     | Check if item in sequence | `'a' in 'cat'` → `True`    |
:::

## Operators: Addition
```{.python}
# Floats
a = 2
b = 3.0
c = a + b # 5.0

# Lists
frukt = ["eple", "banan"]
grønnsaker = ["gulrot", "potet"]
sunn_mat = frukt * grønnsaker # ["eple", "banan", "gulrot", "potet"]

# Strings
fornavn = "mattias"
etternavn = "matthiesen"
brukernavn = fornavn + etternavn # "mattiasmatthiesen"
```


## Operators: Multiplication

Man kan multiplisere mer enn bare *tall*

```{python}
#| echo: True
#| code-line-numbers: false
#| output-location: column-fragment
2 * 3
```

. . .

```{python}
#| echo: True
#| code-line-numbers: false
#| output-location: column-fragment
2 / 3
```

. . .

```{python}
#| echo: True
#| code-line-numbers: false
#| output-location: column-fragment
["eple", "banan"] * 2
```

. . .

```{python}
#| echo: True
#| code-line-numbers: false
#| output-location: column-fragment
"mattias" * 2
```


## Operators: Comparison
Man *sammenligner* med

<div style="background-color: rgb(240,240,240);">
<center>`<` &emsp; `<=` &emsp; `>` &emsp; `>=` &emsp; `==`</center>
</div>
<br>

. . .

```{python}
#| echo: True
#| code-line-numbers: false
#| output-location: column-fragment
2 < 3
```

. . .


```{python}
#| echo: True
#| code-line-numbers: false
#| output-location: column-fragment
"mattias" == "Mattias"
```

. . .

```{python}
#| echo: True
#| code-line-numbers: false
#| output-location: column-fragment
(2 < 3) == ("mattias" == "Mattias")
```


## Operators: Quiz
```{python}
#| echo: True
#| code-echo: False
mattias = {"navn": "mattias", "alder": 30, "hobbyer": ["historie", "piano"]}
gunnar = {"navn": "gunnar", "alder": 31, "hobbyer": ["gitar"]}
```

<br>

```{python}
#| echo: True
#| code-echo: False
#| code-line-numbers: false
#| output-location: fragment
mattias["alder"] + gunnar["alder"]
```

<br>

```{python}
#| echo: True
#| code-echo: False
#| code-line-numbers: false
#| output-location: fragment
mattias["hobbyer"] + gunnar["hobbyer"]
```

<br>

```{python}
#| echo: True
#| code-echo: False
#| code-line-numbers: false
#| output-location: fragment
max([mattias["alder"], gunnar["alder"]]) # 31
```

# Control flow

## Control flow: Loops and comprehensions

```{python}
#| echo: True
#| code-echo: False
personer = [
  {"navn": "mattias", "alder": 30},
  {"navn": "gunnar", "alder": 31},
  {"navn": "trond", "alder": 31},
]
```

. . .

**Loop**
```{python}
#| echo: True
#| code-echo: False
total_alder = 0
for person in personer:
  total_alder = total_alder + person["alder"]
  # alternativ: total_alder += person["alder"]
snittalder = total_alder / len(personer)
snittalder
```

. . .

**Comprehension**
```{python}
#| echo: True
#| code-echo: False
alle_aldre = [person["alder"] for person in personer]
total_alder = sum(alle_aldre)
total_alder
```


## Control flow: Conditions
```{python}
#| echo: True
#| code-echo: False
personer = [
  {"navn": "mattias", "alder": 30},
  {"navn": "gunnar", "alder": 31},
  {"navn": "trond", "alder": 17},
]
```

. . .

**Loop**
```{python}
#| echo: True
#| code-echo: False
total_alder = 0
for person in personer:
  alder = person["alder"]
  if alder > 18:
    total_alder += person["alder"]
total_alder
```

. . .

**Comprehension**
```{python}
#| echo: True
#| code-echo: False
alle_aldre = [person["alder"] for person in personer if person["alder"] > 18]
snittalder = sum(alle_aldre) / len(alle_aldre)
snittalder
```


## Control flow: Oppgave
Finn det største tallet som er mindre enn 1593
```{python}
#| echo: True
tall = [1111, 912, 1430, 2391, 1594]
```

. . .

<br>

:::: {.columns}

::: {.column width="50%"}
Ved bruk av *comprehension*,
```{python}
#| echo: True
#| code-line-numbers: false
svar = max([n for n in tall if n < 1593])
svar
```
:::

::: {.column width="50%"}
Ved bruk av *loop*,
```{python}
#| echo: True
#| code-line-numbers: false
svar = 0
for n in tall:
  if n < 1593 and n >= svar:
    svar = n
svar
```
:::

::::

# Functions

Funksjoner gjør kode *gjenbrukbar* og *generaliserbar*.

```{python}
#| echo: True
#| code-line-numbers: false

def find_conditional_largest(numbers, threshold):
  return max([n for n in numbers if n < threshold])

svar = find_conditional_largest(tall, 1593)
svar
```

## Functions: Namespaces

Variabler har **kontekstuell gyldighet**. Et variabelnavn er gyldig innen et *namespace*.

<br>

:::: {.columns}

::: {.column width="33.33%"}
```{python}
#| echo: True
#| output-location: fragment
#| code-line-numbers: false
divisor = 2

def divide(number):
  return number / divisor

divide(10)
```
:::

::: {.column width="33.33%"}
```{python}
#| echo: True
#| output-location: fragment
#| code-line-numbers: false
divisor = 2

def divide(number):
  divisor = 5
  return number / divisor

divide(10)
```
:::

::: {.column width="33.33%"}
```{python}
#| echo: True
#| output-location: fragment
#| code-line-numbers: false
divisor = 2

def divide(number, divisor):
  return number / divisor

divide(10, 5)
```
:::

::::

<br>
**LEGB-regelen**: Local > enclosing > global > built-in

# Classes
Tilsvarer en `dict`{.python}, men verdier aksesseres med punktum etterfulgt av attributt-navn.

```{.python}
myclass = SomeClass()
value = myclass.some_property
result = myclass.some_function()
```

<br>

- Brukes mest av *package*-forfattere, for å gjøre det lettere å *bruke* deres kode (e.g. `pandas.DataFrame`).
- Brukes for å *samle* relatert kode (variabler og funksjoner) som skal brukes flere ganger i samme program.

. . .

## Classes: Define

```{python}
class Person:
    def __init__(self, name, age, hobbies):
        self.name = name
        self.age = age
        self.hobbies = hobbies

    def likes_books(self):
        if "books" in self.hobbies:
            return True
        return False
```

```{.python code-line-numbers="1|2|3-5|7-10"}
class Person: # <1>
    def __init__(self, name, age, hobbies): # <2>
        self.name = name
        self.age = age
        self.hobbies = hobbies

    def likes_books(self):
        if "books" in self.hobbies:
            return True
        return False
```

1. En `class`-definisjon er en *oppskrift* på hvordan man lager klasse-*instanser*.
2. En *special method* som spesifiserer hvordan en instans skal konstrueres.

## Classes: Create instances
```{python}
#| echo: True
persons = [
    Person(name="mattias", age=30, hobbies=["books", "football"]),
    Person(name="gunnar", age=31, hobbies=[]),
]
```

. . .

```{python}
#| echo: True
#| output-location: fragment
for person in persons:
    if person.likes_books():
        print(person.name + " likes books")
```


# Dokumentasjon

- [Python Package Index (PyPI)](https://pypi.org/): Hvor python-pakker publiseres

## Eksempel: `polars.DataFrame.fold`{.python}

```{.python}
import polars as pl
help(pl.DataFrame.fold)
```

```{python}
import polars as pl
print(pl.DataFrame.fold.__doc__)
```

##
![](./assets/polars_search.png)

. . .

- [https://docs.pola.rs/api/python/stable/reference/dataframe/index.html](https://docs.pola.rs/api/python/stable/reference/dataframe/index.html)

## Oppgave
Hvor mange ganger har generatoren slått seg av og på i den målte tidsperiode?

```{python}
#| echo: True

import polars as pl
import altair as alt

effekt = pl.read_csv(
    "./data/effekt.csv", schema={"tidsstempel": pl.Datetime, "effekt": pl.Float32}
)

alt.Chart(effekt).mark_line(interpolate="step-after").encode(
    alt.X("tidsstempel"), alt.Y("effekt").scale(zero=False),
).properties(width=1100, height=200)
```

##
```{python}
#| echo: True

effekt.with_columns(
    (pl.col("effekt").diff().abs() > 8).alias("is_above")
).select(
    pl.sum("is_above")
)

```
